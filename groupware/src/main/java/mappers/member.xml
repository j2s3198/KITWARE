<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.groupware.member.Dao"> <!-- Dao implements한 클래스 이름지정 -->

	<resultMap id="memberResult" type="project.groupware.member.Member"> <!-- id:검색된결과를 반환, type:Bean/DTO/VO -->
		<result column="member_id" property="member_id" /> <!-- column:컬럼이름, property:멤버변수 -->
		<result column="member_pw" property="member_pw" />
		<result column="member_name" property="member_name" />
		<result column="member_birth" property="member_birth" />
		<result column="member_email" property="member_email" />
		<result column="member_address1" property="member_address1" />
		<result column="member_address2" property="member_address2" />
		<result column="member_address3" property="member_address3" />
		<result column="member_phone" property="member_phone" />
		<result column="member_department" property="member_department" />
		<result column="member_rank" property="member_rank" />
		<result column="member_indate" property="member_indate" />
		<result column="member_modidate" property="member_modidate" />
		<result column="member_gender" property="member_gender" />
		<result column="member_img" property="member_img" />
		<result column="member_sign" property="member_sign" />
		<result column="member_status" property="member_status" />
		<result column="rank_name" property="rank_name"/>
		<result column="department_name" property="department_name"/>
	</resultMap>
	
	<resultMap id="depositResult" type="dto.MemDeposit">
      <result column="depo_member_id" property="depo_member_id" />
      <result column="depo_bank_id" property="depo_bank_id" />
      <result column="depo_number" property="depo_number" />
   </resultMap>

	<select id="makeIdNum" resultType="int">
		SELECT seq_member_id.nextval FROM dual
	</select>
	
	<insert id="insert" parameterType="project.groupware.member.Member"> <!-- id:interface method 이름, parameterType:객체 -->
		INSERT INTO member (member_id, member_pw, member_name, member_birth, member_email, member_address1, member_address2,
		member_address3, member_phone, member_department, member_rank, member_gender)
		VALUES(#{member_id}, #{member_pw}, #{member_name}, #{member_birth}, 
		#{member_email, jdbcType=VARCHAR}, #{member_address1}, #{member_address2}, #{member_address3},  #{member_phone},
		 999, 99, #{member_gender})
	</insert>	
	
	<select id="selectAll" resultMap="memberResult">
		SELECT * FROM member WHERE member_status != 8
	</select>
	
	<select id="selectMember" parameterType="int" resultMap="memberResult">
		select * from member m , department d, rank k where m.member_department = d.department_id(+) and m.member_rank = k.rank_id(+) and member_id = #{member_id}
	</select>
	
	<select id="selectName" parameterType="int" resultType="String">
		SELECT member_name FROM member WHERE member_id = #{member_id}
	</select>
	
	<select id="selectId" parameterType="project.groupware.member.Member" resultType="int">
		SELECT member_id FROM member WHERE member_name = #{member_name} AND member_birth = #{member_birth} AND member_email = #{member_email}
	</select>
	
	<select id="selectPw" parameterType="project.groupware.member.Member" resultType="String">
		SELECT member_pw FROM member WHERE member_id = #{member_id} AND member_name = #{member_name} AND member_birth = #{member_birth}
	</select>
	
	<select id="selectEmail" parameterType="project.groupware.member.Member" resultType="String">
		SELECT member_email FROM member WHERE member_id = #{member_id} AND member_name = #{member_name} AND member_birth = #{member_birth}
	</select>
	
	<update id="update" parameterType="project.groupware.member.Member">
		UPDATE member SET member_email = #{member_email}, member_address1 = #{member_address1}, member_address2 = #{member_address2},
		 member_address3 = #{member_address3}, member_phone = #{member_phone}, member_modidate = sysdate,
		 member_img = #{member_img, jdbcType=VARCHAR}, member_sign = #{member_sign, jdbcType=VARCHAR} WHERE member_id = #{member_id}
	</update>
	
	<update id="updateManager" parameterType="project.groupware.member.Member">
		UPDATE member SET member_department = #{member_department}, member_rank = #{member_rank},
		member_status = #{member_status}, member_modidate = sysdate WHERE member_id = #{member_id}
	</update>
	
	<update id="updatePw" parameterType="project.groupware.member.Member">
		UPDATE member SET member_pw = #{member_pw}, member_status = #{member_status} WHERE member_id = #{member_id}
	</update>
	
	<update id="updateRank" parameterType="Map">
		UPDATE member SET member_rank = #{rank.rank_id} WHERE member_rank = #{ori_id}
	</update>
	
	<update id="updateDept" parameterType="Map">
		UPDATE member SET member_department = #{dept.department_id} WHERE member_department = #{ori_id}
	</update>
	
	<delete id="delete" parameterType="String">
		DELETE member WHERE member_id = #{member_id}
	</delete>
	
	<select id="selectStatistics" parameterType="Map" resultType="int">
		SELECT COUNT(*) 
		FROM member 
		WHERE member_gender IN ('남','여')
		<if test="dept != null">
		AND member_department = #{dept}
		</if>
		<if test="rank != null">
		AND member_rank = #{rank}
		</if>
		AND member_status in 
		<foreach collection="list" item="member" open="(" close=")" separator=",">
		#{member}
		</foreach>
		GROUP BY member_gender
	</select>	
	
	
	<!-- join -->
	<select id="selectCondition" parameterType="Map" resultMap="memberResult">
		SELECT * 
		FROM member m , department d, rank k 
		WHERE m.member_department = d.department_id(+) 
		AND m.member_rank = k.rank_id(+) 
		AND member_status IN 
		<foreach collection="list" item="member" open="(" close=")" separator=",">
		#{member}
		</foreach>
	</select>	
	
	<select id="selectAllMemJoin" resultMap="memberResult">
		select * from member m , department d, rank k where m.member_department = d.department_id(+) and m.member_rank = k.rank_id(+) and m.member_status in (1,2,5)  
	</select>

	<select id="selectByDeptId" parameterType="int" resultMap="memberResult">
		select * from member m , department d, rank k where m.member_department = d.department_id(+) and m.member_rank = k.rank_id(+) and member_department = #{department_id}
	</select>

	<select id="selectByName" parameterType="String" resultMap="memberResult">
		select * from member m , department d, rank k where m.member_department = d.department_id(+) and m.member_rank = k.rank_id(+) and member_name like #{member_name}
	</select>

	<select id="selectById" parameterType="int" resultMap="memberResult">
		select * from member m , department d, rank k where m.member_department = d.department_id(+) and m.member_rank = k.rank_id(+) and member_id = #{member_id}
	</select>
	
	<!-- deposit -->    
    <insert id="insertDeposit" parameterType="dto.MemDeposit"> <!-- id:interface method 이름, parameterType:객체 -->
		INSERT INTO member_deposit(depo_member_id, depo_bank_id, depo_number)
		 VALUES(#{depo_member_id}, #{depo_bank_id}, #{depo_number})
	</insert>
	
	<select id="selectDepo_Id" parameterType="dto.MemDeposit" resultMap="depositResult">
		SELECT depo_member_id FROM member_deposit WHERE depo_member_id = #{depo_member_id}
	</select>
	
	<select id="selectDeposit" parameterType="int" resultMap="depositResult">
      select * from member_deposit where depo_member_id = #{approval_id}
    </select>
	
	<update id="updateDeposit" parameterType="dto.MemDeposit">
		UPDATE member_deposit SET depo_bank_id = #{depo_bank_id},  depo_number = #{depo_number}
		WHERE depo_member_id = #{depo_member_id}
	</update>
	
	<delete id="deleteDeposit" parameterType="String">
		DELETE member_deposit WHERE depo_member_id = #{depo_member_id}
	</delete>

</mapper>

